// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RTMAutoRest.Clients
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for TestAPI.
    /// </summary>
    public static partial class TestAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ApiTestComplexV1GetAllGet(this ITestAPI operations)
            {
                return Task.Factory.StartNew(s => ((ITestAPI)s).ApiTestComplexV1GetAllGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTestComplexV1GetAllGetAsync(this ITestAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTestComplexV1GetAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object ApiTestComplexV1GetByIDByIdGet(this ITestAPI operations, int id)
            {
                return Task.Factory.StartNew(s => ((ITestAPI)s).ApiTestComplexV1GetByIDByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTestComplexV1GetByIDByIdGetAsync(this ITestAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTestComplexV1GetByIDByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='complex'>
            /// </param>
            public static object ApiTestComplexV1PostPost(this ITestAPI operations, ModelsTestComplex complex = default(ModelsTestComplex))
            {
                return Task.Factory.StartNew(s => ((ITestAPI)s).ApiTestComplexV1PostPostAsync(complex), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='complex'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTestComplexV1PostPostAsync(this ITestAPI operations, ModelsTestComplex complex = default(ModelsTestComplex), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTestComplexV1PostPostWithHttpMessagesAsync(complex, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
